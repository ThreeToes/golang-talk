// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PictureSharingClient is the client API for PictureSharing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PictureSharingClient interface {
	GetPicture(ctx context.Context, in *GetPictureParameters, opts ...grpc.CallOption) (*InnocentPicture, error)
	SayThankyou(ctx context.Context, in *Thankyou, opts ...grpc.CallOption) (*ThankyouOutput, error)
}

type pictureSharingClient struct {
	cc grpc.ClientConnInterface
}

func NewPictureSharingClient(cc grpc.ClientConnInterface) PictureSharingClient {
	return &pictureSharingClient{cc}
}

func (c *pictureSharingClient) GetPicture(ctx context.Context, in *GetPictureParameters, opts ...grpc.CallOption) (*InnocentPicture, error) {
	out := new(InnocentPicture)
	err := c.cc.Invoke(ctx, "/PictureSharing/GetPicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureSharingClient) SayThankyou(ctx context.Context, in *Thankyou, opts ...grpc.CallOption) (*ThankyouOutput, error) {
	out := new(ThankyouOutput)
	err := c.cc.Invoke(ctx, "/PictureSharing/SayThankyou", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PictureSharingServer is the server API for PictureSharing service.
// All implementations must embed UnimplementedPictureSharingServer
// for forward compatibility
type PictureSharingServer interface {
	GetPicture(context.Context, *GetPictureParameters) (*InnocentPicture, error)
	SayThankyou(context.Context, *Thankyou) (*ThankyouOutput, error)
	mustEmbedUnimplementedPictureSharingServer()
}

// UnimplementedPictureSharingServer must be embedded to have forward compatible implementations.
type UnimplementedPictureSharingServer struct {
}

func (UnimplementedPictureSharingServer) GetPicture(context.Context, *GetPictureParameters) (*InnocentPicture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicture not implemented")
}
func (UnimplementedPictureSharingServer) SayThankyou(context.Context, *Thankyou) (*ThankyouOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayThankyou not implemented")
}
func (UnimplementedPictureSharingServer) mustEmbedUnimplementedPictureSharingServer() {}

// UnsafePictureSharingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PictureSharingServer will
// result in compilation errors.
type UnsafePictureSharingServer interface {
	mustEmbedUnimplementedPictureSharingServer()
}

func RegisterPictureSharingServer(s grpc.ServiceRegistrar, srv PictureSharingServer) {
	s.RegisterService(&PictureSharing_ServiceDesc, srv)
}

func _PictureSharing_GetPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPictureParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureSharingServer).GetPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PictureSharing/GetPicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureSharingServer).GetPicture(ctx, req.(*GetPictureParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureSharing_SayThankyou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thankyou)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureSharingServer).SayThankyou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PictureSharing/SayThankyou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureSharingServer).SayThankyou(ctx, req.(*Thankyou))
	}
	return interceptor(ctx, in, info, handler)
}

// PictureSharing_ServiceDesc is the grpc.ServiceDesc for PictureSharing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PictureSharing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PictureSharing",
	HandlerType: (*PictureSharingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPicture",
			Handler:    _PictureSharing_GetPicture_Handler,
		},
		{
			MethodName: "SayThankyou",
			Handler:    _PictureSharing_SayThankyou_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/innocent_pictures.proto",
}

// MemeDealerClient is the client API for MemeDealer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemeDealerClient interface {
	DishMeme(ctx context.Context, in *DishMemeParamaters, opts ...grpc.CallOption) (*DishMemeResponse, error)
	GetMemeStatus(ctx context.Context, in *CheckMemeStatusParameters, opts ...grpc.CallOption) (*CheckMemeStatusResponse, error)
}

type memeDealerClient struct {
	cc grpc.ClientConnInterface
}

func NewMemeDealerClient(cc grpc.ClientConnInterface) MemeDealerClient {
	return &memeDealerClient{cc}
}

func (c *memeDealerClient) DishMeme(ctx context.Context, in *DishMemeParamaters, opts ...grpc.CallOption) (*DishMemeResponse, error) {
	out := new(DishMemeResponse)
	err := c.cc.Invoke(ctx, "/MemeDealer/DishMeme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memeDealerClient) GetMemeStatus(ctx context.Context, in *CheckMemeStatusParameters, opts ...grpc.CallOption) (*CheckMemeStatusResponse, error) {
	out := new(CheckMemeStatusResponse)
	err := c.cc.Invoke(ctx, "/MemeDealer/GetMemeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemeDealerServer is the server API for MemeDealer service.
// All implementations must embed UnimplementedMemeDealerServer
// for forward compatibility
type MemeDealerServer interface {
	DishMeme(context.Context, *DishMemeParamaters) (*DishMemeResponse, error)
	GetMemeStatus(context.Context, *CheckMemeStatusParameters) (*CheckMemeStatusResponse, error)
	mustEmbedUnimplementedMemeDealerServer()
}

// UnimplementedMemeDealerServer must be embedded to have forward compatible implementations.
type UnimplementedMemeDealerServer struct {
}

func (UnimplementedMemeDealerServer) DishMeme(context.Context, *DishMemeParamaters) (*DishMemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DishMeme not implemented")
}
func (UnimplementedMemeDealerServer) GetMemeStatus(context.Context, *CheckMemeStatusParameters) (*CheckMemeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemeStatus not implemented")
}
func (UnimplementedMemeDealerServer) mustEmbedUnimplementedMemeDealerServer() {}

// UnsafeMemeDealerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemeDealerServer will
// result in compilation errors.
type UnsafeMemeDealerServer interface {
	mustEmbedUnimplementedMemeDealerServer()
}

func RegisterMemeDealerServer(s grpc.ServiceRegistrar, srv MemeDealerServer) {
	s.RegisterService(&MemeDealer_ServiceDesc, srv)
}

func _MemeDealer_DishMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishMemeParamaters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeDealerServer).DishMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemeDealer/DishMeme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeDealerServer).DishMeme(ctx, req.(*DishMemeParamaters))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemeDealer_GetMemeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMemeStatusParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeDealerServer).GetMemeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemeDealer/GetMemeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeDealerServer).GetMemeStatus(ctx, req.(*CheckMemeStatusParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// MemeDealer_ServiceDesc is the grpc.ServiceDesc for MemeDealer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemeDealer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemeDealer",
	HandlerType: (*MemeDealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DishMeme",
			Handler:    _MemeDealer_DishMeme_Handler,
		},
		{
			MethodName: "GetMemeStatus",
			Handler:    _MemeDealer_GetMemeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/innocent_pictures.proto",
}
